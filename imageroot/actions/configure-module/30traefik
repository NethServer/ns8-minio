#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import sys
import json
import agent
import agent.tasks

config = {}

# Read current configuration from config file
# Do not use the STDIN, so we can reuse this action also inside the restore
with open('config.json', 'r') as cf:
    config = json.loads(cf.read())

# Configure Traefik route for UI
response_console = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': f"{os.environ['MODULE_ID']}-console",
        'url':  'http://127.0.0.1:' + os.environ["TCP_CONSOLE_PORT"],
        'http2https': True,
        'lets_encrypt': config['lets_encrypt'],
        'host': config['host_console']
    },
)

# Check if traefik configuration has been successfull
agent.assert_exp(response_console['exit_code'] == 0)

# Configure Traefik route for API
response_server = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': f"{os.environ['MODULE_ID']}-server",
        'url':  'http://127.0.0.1:' + os.environ["TCP_SERVER_PORT"],
        'http2https': True,
        'lets_encrypt': config['lets_encrypt'],
        'host': config['host_server']
    },
)

# Check if traefik configuration has been successfull
agent.assert_exp(response_server['exit_code'] == 0)
